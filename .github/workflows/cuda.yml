name: cuda
on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/cuda.yml
  workflow_dispatch:

jobs:
  build-all:
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: Jimver/cuda-toolkit@master
      id: cuda-toolkit
      with:
        method: network
        cuda: "12.8.1"
        # Windows sub-packages are kind of different, so we need to handle them separately
        # https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html
        sub-packages: ${{ matrix.os == 'ubuntu-22.04' && '["nvcc"]' || '["nvcc", "cublas", "cublas_dev", "cudart"]' }}
        non-cuda-sub-packages: ${{ matrix.os == 'ubuntu-22.04' && '["libcublas", "libcublas-dev"]' || '[]' }}
        log-file-suffix: '${{matrix.os}}.txt'

    - name: Download cuDNN
      shell: pwsh
      run: |
        echo "Downloading cuDNN..."
        if ("${{ matrix.os }}" -eq "ubuntu-22.04") {
          Invoke-WebRequest -Uri https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/linux-x86_64/cudnn-linux-x86_64-9.5.1.17_cuda12-archive.tar.xz -OutFile cudnn.tar.xz
          mkdir cudnn && tar -xf cudnn.tar.xz --strip-components=1 -C cudnn
        } elseif ("${{ matrix.os }}" -eq "windows-2022") {
          Invoke-WebRequest -Uri https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/windows-x86_64/cudnn-windows-x86_64-9.5.1.17_cuda12-archive.zip -OutFile cudnn.zip
          Expand-Archive -Path cudnn.zip -DestinationPath cudnn
        }

        echo "::group:: cuDNN files"
        Get-ChildItem -Recurse cudnn
        echo "::endgroup::"

    - name: Install cuDNN
      shell: pwsh
      run: |
        echo "Installing cuDNN..."
        if ("${{ matrix.os }}" -eq "ubuntu-22.04") {
          sudo cp cudnn/include/* ${{steps.cuda-toolkit.outputs.CUDA_PATH}}/include/
          sudo cp cudnn/lib/* ${{steps.cuda-toolkit.outputs.CUDA_PATH}}/lib64/
        } elseif ("${{ matrix.os }}" -eq "windows-2022") {
          cp -r cudnn "${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
        }

    - name: Show CUDA
      run: |
        echo "Cuda install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
        echo "Installed cuda version is: ${{steps.cuda-toolkit.outputs.cuda}}"
        nvcc --version

    - name: Show CUDA Artifacts
      shell: bash
      run: |
        echo "CUDA artifacts:"
        ls -lR "${{steps.cuda-toolkit.outputs.CUDA_PATH}}"